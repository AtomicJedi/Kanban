[{"/home/atomicjedi/Projects/kanban/kanban/src/index.js":"1","/home/atomicjedi/Projects/kanban/kanban/src/App.js":"2","/home/atomicjedi/Projects/kanban/kanban/src/reportWebVitals.js":"3","/home/atomicjedi/Projects/kanban/kanban/src/mainСomponent/mainComponent.js":"4","/home/atomicjedi/Projects/kanban/kanban/src/routs/inBoard/inBoardSpase.js":"5","/home/atomicjedi/Projects/kanban/kanban/src/routs/header.js":"6","/home/atomicjedi/Projects/kanban/kanban/src/modals/modalAdd.js":"7","/home/atomicjedi/Projects/kanban/kanban/src/board/board.js":"8"},{"size":500,"mtime":1610215231706,"results":"9","hashOfConfig":"10"},{"size":242,"mtime":1610215231706,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1610215231714,"results":"12","hashOfConfig":"10"},{"size":592,"mtime":1610282881759,"results":"13","hashOfConfig":"10"},{"size":4904,"mtime":1610215231750,"results":"14","hashOfConfig":"10"},{"size":884,"mtime":1610293410606,"results":"15","hashOfConfig":"10"},{"size":1935,"mtime":1610293239734,"results":"16","hashOfConfig":"10"},{"size":1721,"mtime":1610283210882,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"els9z",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"20"},"/home/atomicjedi/Projects/kanban/kanban/src/index.js",[],["37","38"],"/home/atomicjedi/Projects/kanban/kanban/src/App.js",[],"/home/atomicjedi/Projects/kanban/kanban/src/reportWebVitals.js",[],"/home/atomicjedi/Projects/kanban/kanban/src/mainСomponent/mainComponent.js",[],"/home/atomicjedi/Projects/kanban/kanban/src/routs/inBoard/inBoardSpase.js",["39","40","41"],"import React, { useState } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport uuid from 'react-uuid'\n\nconst itemsFromBackend = [\n  { id: uuid(), content: \"First task\" },\n  { id: uuid(), content: \"Second task\" },\n  { id: uuid(), content: \"Third task\" },\n  { id: uuid(), content: \"Fourth task\" },\n  { id: uuid(), content: \"Fifth task\" }\n];\n\nconst columnsFromBackend = {\n  [uuid()]: {\n    name: \"Requested\",\n    items: itemsFromBackend\n  },\n  [uuid()]: {\n    name: \"To do\",\n    items: []\n  },\n  [uuid()]: {\n    name: \"In Progress\",\n    items: []\n  },\n  [uuid()]: {\n    name: \"Done\",\n    items: []\n  }\n};\n\nconst onDragEnd = (result, columns, setColumns) => {\n  if (!result.destination) return;\n  const { source, destination } = result;\n\n  if (source.droppableId !== destination.droppableId) {\n    const sourceColumn = columns[source.droppableId];\n    const destColumn = columns[destination.droppableId];\n    const sourceItems = [...sourceColumn.items];\n    const destItems = [...destColumn.items];\n    const [removed] = sourceItems.splice(source.index, 1);\n    destItems.splice(destination.index, 0, removed);\n    setColumns({\n      ...columns,\n      [source.droppableId]: {\n        ...sourceColumn,\n        items: sourceItems\n      },\n      [destination.droppableId]: {\n        ...destColumn,\n        items: destItems\n      }\n    });\n  } else {\n    const column = columns[source.droppableId];\n    const copiedItems = [...column.items];\n    const [removed] = copiedItems.splice(source.index, 1);\n    copiedItems.splice(destination.index, 0, removed);\n    setColumns({\n      ...columns,\n      [source.droppableId]: {\n        ...column,\n        items: copiedItems\n      }\n    });\n  }\n};\n\nfunction InBoardSpase() {\n  const [columns, setColumns] = useState(columnsFromBackend);\n  return (\n    <div style={{ display: \"flex\", justifyContent: \"center\", height: \"100%\" }}>\n      <DragDropContext\n        onDragEnd={result => onDragEnd(result, columns, setColumns)}\n      >\n        {Object.entries(columns).map(([columnId, column], index) => {\n          return (\n            <div\n              style={{\n                display: \"flex\",\n                flexDirection: \"column\",\n                alignItems: \"center\"\n              }}\n              key={columnId}\n            >\n              <h2>{column.name}</h2>\n              <div style={{ margin: 8 }}>\n                <Droppable droppableId={columnId} key={columnId}>\n                  {(provided, snapshot) => {\n                    return (\n                      <div\n                        {...provided.droppableProps}\n                        ref={provided.innerRef}\n                        style={{\n                          background: snapshot.isDraggingOver\n                            ? \"lightblue\"\n                            : \"lightgrey\",\n                          padding: 4,\n                          width: 250,\n                          minHeight: 500\n                        }}\n                      >\n                        {column.items.map((item, index) => {\n                          return (\n                            <Draggable\n                              key={item.id}\n                              draggableId={item.id}\n                              index={index}\n                            >\n                              {(provided, snapshot) => {\n                                return (\n                                  <div\n                                    ref={provided.innerRef}\n                                    {...provided.draggableProps}\n                                    {...provided.dragHandleProps}\n                                    style={{\n                                      userSelect: \"none\",\n                                      padding: 16,\n                                      margin: \"0 0 8px 0\",\n                                      minHeight: \"50px\",\n                                      backgroundColor: snapshot.isDragging\n                                        ? \"#263B4A\"\n                                        : \"#456C86\",\n                                      color: \"white\",\n                                      ...provided.draggableProps.style\n                                    }}\n                                  >\n                                    {item.content}\n                                  </div>\n                                );\n                              }}\n                            </Draggable>\n                          );\n                        })}\n                        {provided.placeholder}\n                      </div>\n                    );\n                  }}\n                </Droppable>\n              </div>\n            </div>\n          );\n        })}\n      </DragDropContext>\n    </div>\n  );\n}\n\nexport default InBoardSpase;","/home/atomicjedi/Projects/kanban/kanban/src/routs/header.js",[],"/home/atomicjedi/Projects/kanban/kanban/src/modals/modalAdd.js",["42","43","44"],"/home/atomicjedi/Projects/kanban/kanban/src/board/board.js",["45","46","47"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles({\n\n    root: {\n        maxWidth: 250,\n        height: 200,\n    },\n    media: {\n        maxHeight: 300,\n    },\n    MuiCardActionArea: {\n        height: 200\n    },\n    MuiTypography: {\n        display: 'flex',\n        'justify-content': 'center'\n    }\n});\n\n\n\nexport default function MediaCard(addBoard) {\n    const classes = useStyles();\n\n    return (\n        <Card className={classes.root}>\n            <CardActionArea className={classes.MuiCardActionArea}>\n\n                <CardContent>\n                    <Typography className={classes.MuiTypography} gutterBottom variant=\"h5\" component=\"h2\">\n                        Hare Krishna!!!\n          </Typography>\n                    {/* <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n            Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging\n            across all continents except Antarctica\n          </Typography> */}\n                </CardContent>\n            </CardActionArea>\n            {/* <CardActions>\n        <Button size=\"small\" color=\"primary\">\n          Share\n        </Button>\n        <Button size=\"small\" color=\"primary\">\n          Learn More\n        </Button>\n      </CardActions> */}\n        </Card>\n    );\n}\n\n",{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":2,"column":27,"nodeType":"54","messageId":"55","endLine":2,"endColumn":33},{"ruleId":"52","severity":1,"message":"56","line":2,"column":35,"nodeType":"54","messageId":"55","endLine":2,"endColumn":40},{"ruleId":"52","severity":1,"message":"57","line":2,"column":42,"nodeType":"54","messageId":"55","endLine":2,"endColumn":48},{"ruleId":"52","severity":1,"message":"58","line":9,"column":8,"nodeType":"54","messageId":"55","endLine":9,"endColumn":13},{"ruleId":"52","severity":1,"message":"59","line":23,"column":10,"nodeType":"54","messageId":"55","endLine":23,"endColumn":15},{"ruleId":"60","severity":1,"message":"61","line":63,"column":37,"nodeType":"62","messageId":"63","endLine":63,"endColumn":38},{"ruleId":"52","severity":1,"message":"64","line":5,"column":8,"nodeType":"54","messageId":"55","endLine":5,"endColumn":19},{"ruleId":"52","severity":1,"message":"65","line":7,"column":8,"nodeType":"54","messageId":"55","endLine":7,"endColumn":17},{"ruleId":"52","severity":1,"message":"66","line":8,"column":8,"nodeType":"54","messageId":"55","endLine":8,"endColumn":14},"no-native-reassign",["67"],"no-negated-in-lhs",["68"],"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'Route' is defined but never used.","'Switch' is defined but never used.","'Headr' is defined but never used.","'input' is assigned a value but never used.","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","'CardActions' is defined but never used.","'CardMedia' is defined but never used.","'Button' is defined but never used.","no-global-assign","no-unsafe-negation"]