[{"/home/cubex/project/kanban/kanban/kanban/src/index.js":"1","/home/cubex/project/kanban/kanban/kanban/src/App.js":"2","/home/cubex/project/kanban/kanban/kanban/src/reportWebVitals.js":"3","/home/cubex/project/kanban/kanban/kanban/src/mainСomponent/mainComponent.js":"4","/home/cubex/project/kanban/kanban/kanban/src/routs/inBoard/inBoardSpase.js":"5","/home/cubex/project/kanban/kanban/kanban/src/routs/header.js":"6"},{"size":500,"mtime":1609841670777,"results":"7","hashOfConfig":"8"},{"size":242,"mtime":1609935021786,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1609841670781,"results":"10","hashOfConfig":"8"},{"size":574,"mtime":1609947424904,"results":"11","hashOfConfig":"8"},{"size":4904,"mtime":1609942715963,"results":"12","hashOfConfig":"8"},{"size":487,"mtime":1609947346674,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1wbeyjt",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/cubex/project/kanban/kanban/kanban/src/index.js",[],["28","29"],"/home/cubex/project/kanban/kanban/kanban/src/App.js",[],"/home/cubex/project/kanban/kanban/kanban/src/reportWebVitals.js",[],"/home/cubex/project/kanban/kanban/kanban/src/mainСomponent/mainComponent.js",[],"/home/cubex/project/kanban/kanban/kanban/src/routs/inBoard/inBoardSpase.js",["30","31","32"],"import React, { useState } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport uuid from 'react-uuid'\n\nconst itemsFromBackend = [\n  { id: uuid(), content: \"First task\" },\n  { id: uuid(), content: \"Second task\" },\n  { id: uuid(), content: \"Third task\" },\n  { id: uuid(), content: \"Fourth task\" },\n  { id: uuid(), content: \"Fifth task\" }\n];\n\nconst columnsFromBackend = {\n  [uuid()]: {\n    name: \"Requested\",\n    items: itemsFromBackend\n  },\n  [uuid()]: {\n    name: \"To do\",\n    items: []\n  },\n  [uuid()]: {\n    name: \"In Progress\",\n    items: []\n  },\n  [uuid()]: {\n    name: \"Done\",\n    items: []\n  }\n};\n\nconst onDragEnd = (result, columns, setColumns) => {\n  if (!result.destination) return;\n  const { source, destination } = result;\n\n  if (source.droppableId !== destination.droppableId) {\n    const sourceColumn = columns[source.droppableId];\n    const destColumn = columns[destination.droppableId];\n    const sourceItems = [...sourceColumn.items];\n    const destItems = [...destColumn.items];\n    const [removed] = sourceItems.splice(source.index, 1);\n    destItems.splice(destination.index, 0, removed);\n    setColumns({\n      ...columns,\n      [source.droppableId]: {\n        ...sourceColumn,\n        items: sourceItems\n      },\n      [destination.droppableId]: {\n        ...destColumn,\n        items: destItems\n      }\n    });\n  } else {\n    const column = columns[source.droppableId];\n    const copiedItems = [...column.items];\n    const [removed] = copiedItems.splice(source.index, 1);\n    copiedItems.splice(destination.index, 0, removed);\n    setColumns({\n      ...columns,\n      [source.droppableId]: {\n        ...column,\n        items: copiedItems\n      }\n    });\n  }\n};\n\nfunction InBoardSpase() {\n  const [columns, setColumns] = useState(columnsFromBackend);\n  return (\n    <div style={{ display: \"flex\", justifyContent: \"center\", height: \"100%\" }}>\n      <DragDropContext\n        onDragEnd={result => onDragEnd(result, columns, setColumns)}\n      >\n        {Object.entries(columns).map(([columnId, column], index) => {\n          return (\n            <div\n              style={{\n                display: \"flex\",\n                flexDirection: \"column\",\n                alignItems: \"center\"\n              }}\n              key={columnId}\n            >\n              <h2>{column.name}</h2>\n              <div style={{ margin: 8 }}>\n                <Droppable droppableId={columnId} key={columnId}>\n                  {(provided, snapshot) => {\n                    return (\n                      <div\n                        {...provided.droppableProps}\n                        ref={provided.innerRef}\n                        style={{\n                          background: snapshot.isDraggingOver\n                            ? \"lightblue\"\n                            : \"lightgrey\",\n                          padding: 4,\n                          width: 250,\n                          minHeight: 500\n                        }}\n                      >\n                        {column.items.map((item, index) => {\n                          return (\n                            <Draggable\n                              key={item.id}\n                              draggableId={item.id}\n                              index={index}\n                            >\n                              {(provided, snapshot) => {\n                                return (\n                                  <div\n                                    ref={provided.innerRef}\n                                    {...provided.draggableProps}\n                                    {...provided.dragHandleProps}\n                                    style={{\n                                      userSelect: \"none\",\n                                      padding: 16,\n                                      margin: \"0 0 8px 0\",\n                                      minHeight: \"50px\",\n                                      backgroundColor: snapshot.isDragging\n                                        ? \"#263B4A\"\n                                        : \"#456C86\",\n                                      color: \"white\",\n                                      ...provided.draggableProps.style\n                                    }}\n                                  >\n                                    {item.content}\n                                  </div>\n                                );\n                              }}\n                            </Draggable>\n                          );\n                        })}\n                        {provided.placeholder}\n                      </div>\n                    );\n                  }}\n                </Droppable>\n              </div>\n            </div>\n          );\n        })}\n      </DragDropContext>\n    </div>\n  );\n}\n\nexport default InBoardSpase;","/home/cubex/project/kanban/kanban/kanban/src/routs/header.js",[],{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":2,"column":27,"nodeType":"39","messageId":"40","endLine":2,"endColumn":33},{"ruleId":"37","severity":1,"message":"41","line":2,"column":35,"nodeType":"39","messageId":"40","endLine":2,"endColumn":40},{"ruleId":"37","severity":1,"message":"42","line":2,"column":42,"nodeType":"39","messageId":"40","endLine":2,"endColumn":48},"no-native-reassign",["43"],"no-negated-in-lhs",["44"],"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'Route' is defined but never used.","'Switch' is defined but never used.","no-global-assign","no-unsafe-negation"]